using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Stix.Api.Models;
using Stix.BLL.Interfaces;
using Stix.Core.Entities;

namespace Stix.Api.Controllers
{

    [Route("vulnerabilities")]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IVulnerabilityService _vulnerabilityService;

        public VulnerabilityController(IVulnerabilityService vulnerabilityService) => _vulnerabilityService = vulnerabilityService;

        [HttpGet("")]
        [Authorize(Roles = "Read")]
        public async Task<IEnumerable<Vulnerability>> GetAll()
        {
            return await _vulnerabilityService.GetAll();
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "Read")]
        public async Task<Vulnerability?> GetById(IdRequest idRequest)
        {
            return await _vulnerabilityService.GetById(idRequest.id);
        }

        [HttpPost]
        [Authorize(Roles = "Modify")]
        public async Task<IActionResult> Create([FromBody] AlterVulnerability alterVulnerability)
        {
            Vulnerability vulnerability = MapToVulnerability(alterVulnerability, id: null, createdByRef: User.Claims.FirstOrDefault()?.Value);

            var createdVulnerability = await _vulnerabilityService.Create(vulnerability);

            return Created(Url.Action(nameof(GetById), new { id = createdVulnerability.Id })!, createdVulnerability);
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "Modify")]
        public async Task<IActionResult> Update(IdRequest idRequest, [FromBody] AlterVulnerability alterVulnerability)
        {
            Vulnerability vulnerability = MapToVulnerability(alterVulnerability, id: idRequest.id, createdByRef: null);

            await _vulnerabilityService.Update(vulnerability);
            return Ok();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Modify")]
        public async Task<IActionResult> Delete(IdRequest idRequest)
        {
            await _vulnerabilityService.Delete(idRequest.id);

            return Ok();
        }
        private static Vulnerability MapToVulnerability(AlterVulnerability alterVulnerability, string? id, string? createdByRef)
        {
            return new Vulnerability()
            {
                Id = id,
                Name = alterVulnerability.Name,
                Description = alterVulnerability.Description,
            };
        }
    }
}
