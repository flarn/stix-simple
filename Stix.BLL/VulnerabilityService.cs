using Stix.BLL.Interfaces;
using Stix.Core;
using Stix.Core.Entities;
using Stix.Core.Interfaces;

namespace Stix.BLL
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly IVulnerabilityRepository _vulnerabilityRepository;

        public VulnerabilityService(IVulnerabilityRepository vulnerabilityRepository) => _vulnerabilityRepository = vulnerabilityRepository;


        public Task<IEnumerable<Vulnerability>> GetAll()
        {
            return _vulnerabilityRepository.GetAllVulnerabilities();
        }

        public Task<Vulnerability?> GetById(string id)
        {
            return _vulnerabilityRepository.GetVulnerabilityById(id);
        }

        public async Task<Vulnerability> Create(Vulnerability vulnerability)
        {
            vulnerability.Id = IdGenerator.Generate<Vulnerability>();
            vulnerability.Created = DateTimeOffset.UtcNow;

            return await _vulnerabilityRepository.CreateVulnerability(vulnerability);
        }

        public async Task Update(Vulnerability vulnerability)
        {
            var vulnerabilityToUpdate = await GetById(vulnerability.Id);
            if (vulnerabilityToUpdate == null)
                throw new EntityNotFoundException(vulnerability.Id);


            vulnerabilityToUpdate.Modified = DateTimeOffset.UtcNow;
            vulnerabilityToUpdate.Name = vulnerability.Name;
            vulnerabilityToUpdate.Description = vulnerability.Description;

            await _vulnerabilityRepository.Update(vulnerabilityToUpdate);
        }

        public async Task Delete(string id)
        {
            var vulnerabilityToDelete = await GetById(id);

            if (vulnerabilityToDelete == null)
                throw new EntityNotFoundException(id);


            await _vulnerabilityRepository.DeleteVulnerability(vulnerabilityToDelete);
        }
    }
}